.event-rule-detail {
  @connectorHeight: .5em;
  @connectorColor: @gray-lighter;

  // Layout

  display: flex;

  > .right-arrow,
  > .horizontal-line {
    flex: 1 1 auto;
    height: @connectorHeight;
    margin-top: 2.75em;
    min-width: 1em;
  }

  > .search-controls {
    flex: 3 1 auto;
    min-width: 16em;
    height: fit-content;
    margin-top: 1.25em;

    .filter-input {
      width: 100%;
      margin-right: .5em;
    }
  }

  > .escalations-with-add-form {
    flex: 15 1 auto;
  }

  .escalations {
    display: grid;
    grid-template-columns: min-content minmax(1em, 4em) 1fr minmax(1em, 4em) 1fr;

    .escalation {
      display: contents;
    }

    .remove-escalation-form {
      .vertical-line();

      .remove-button {
        margin-top: 2em;
      }
    }

    // The first escalation isn't connected to anything on top of it
    .escalation:first-child .remove-escalation-form::before {
      top: 2em;
    }

    .right-arrow {
      height: @connectorHeight;
      margin-top: 2.75em;
    }

    .escalation-form {
      position: relative;
      margin-bottom: 1em;

      .options {
        list-style-type: none;
        margin: 0;
        padding: 0;

        .option {
          display: flex;
          margin-bottom: .5em;

          .left-operand,
          .right-operand {
            flex: 1 1 4em;
            min-width: 8em;
            width: 0;
          }

          .operator-input {
            width: 4em;
          }
        }

        & + .add-button {
          width: 100%;

          > .icon {
            margin: 0 auto;
          }
        }
      }

      &.removal-allowed .add-button {
        width: ~"calc(100% - 3.1em)"; // remove-button width + margin-left = 3.1em
      }

      :not(.options) + .add-button {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
      }
    }

    .escalation:first-child .escalation-form .option:first-child .remove-button {
      height: auto; // Don't ask me (jom) why this is necessary. The selector is that specific for this very reason
    }

    & + .add-escalation-form {
      display: inline-block;

      .vertical-line();

      .add-button {
        margin-top: 2em;
      }
    }
  }

  // Style

  .right-arrow,
  .horizontal-line {
    background-color: @connectorColor;
  }

  .search-controls,
  .option-wrapper {
    padding: .5em;
    border: 1px solid @connectorColor;
    .rounded-corners();
  }

  .add-button,
  .remove-button {
    .event-rule-button();
  }

  .add-filter-form .add-button,
  .escalation-form :not(.options) + .add-button {
    // (2em * 2) + 1.5 (icon height) = total height in em of a recipient escalation form with a single recipient
    padding: ~"calc(2em + 1px) 4.125em"; // 1px is the border width of an escalation form

    .icon::before {
      font-size: 2em;
    }
  }

  .remove-escalation-form .remove-button[disabled] {
    background: @connectorColor;
    color: @disabled-gray;
    cursor: not-allowed;
  }

  .escalation-form .options .option {
    > :first-child {
      .rounded-corners(.25em);
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    > :last-child {
      .rounded-corners(.25em);
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    > :not(:last-child) {
      margin-right: 1px;
    }

    > :not(:first-child):not(:last-child) {
      .rounded-corners(0);
    }
  }

  &.invalid {
    select,
    input {
      &:invalid {
        background-color: @state-critical;
      }
    }
  }

  .vertical-line() {
    position: relative;

    &::before {
      position: absolute;
      z-index: -1;
      top: 0;
      bottom: 0;

      @halfedConnectorHeight: @connectorHeight / 2;
      left: ~"calc(50% - @{halfedConnectorHeight})";
      right: ~"calc(50% - @{halfedConnectorHeight})";

      content: "";
      width: @connectorHeight;

      background-color: @connectorColor;
    }
  }
}

#layout.twocols:not(.wide-layout) {
  .event-rule-detail {
    .search-controls {
      min-width: fit-content;

      .filter-input {
        display: none;
      }
    }

    .add-filter-form .add-button,
    .escalation-form :not(.options) + .add-button {
      padding: .25em 1em;

      .icon::before {
        font-size: inherit;
      }
    }

    .add-filter-form .add-button {
      margin-top: 2em;
    }
  }
}

// Other stuff

.cache-notice {
  margin: 1em;
  padding: 1em;
  background-color: @gray-lighter;
  text-align: center;
  .rounded-corners();
}

.event-rule-and-save-forms {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  padding-bottom: 0.75em;

  .event-rule-form {
    display: inline-flex;
    width: fit-content;
    max-width: unset;

    .control-group {
      display: inline-flex;
      margin-right: 2em;

      :last-child {
        float: right;
      }

      .control-label-group {
        width: auto;
      }

      input[type='text'] {
        max-width: unset;
        width: 25em;
      }
    }
  }

  .save-event-rule {
    height: 2.25em;
    display: inline-flex;
    float: right;
    margin: 1em 0 0 auto;

    input[type="submit"]:not(:first-child) {
      margin-left: 1em;

      &:disabled {
        background: @gray-light;
        color: @disabled-gray;
        cursor: not-allowed;
        border-color: transparent;
      }

      &.btn-remove {
        border: none;

        &:disabled {
          background: none;
          cursor: not-allowed;
          opacity: 0.5;
        }
      }

      &.btn-discard-changes {
        .event-rule-button();
      }
    }
  }
}
