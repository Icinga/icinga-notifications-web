<?php

namespace Icinga\Module\Notifications\Api\V1;

use Exception;
use Generator;
use GuzzleHttp\Psr7\Response;
use Icinga\Exception\Http\HttpBadRequestException;
use Icinga\Exception\Http\HttpException;
use Icinga\Exception\Json\JsonDecodeException;
use Icinga\Exception\Json\JsonEncodeException;
use Icinga\Module\Notifications\Api\ApiCore;
use Icinga\Module\Notifications\Api\Elements\HttpMethod;
use Icinga\Module\Notifications\Common\Database;
use Icinga\Util\Json;
use ipl\Sql\Compat\FilterProcessor;
use ipl\Sql\Connection;
use ipl\Sql\Select;
use ipl\Stdlib\Filter\Condition;
use ipl\Web\Filter\QueryString;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use OpenApi\Attributes as OA;
use Ramsey\Uuid\Uuid;
use Psr\Http\Server\RequestHandlerInterface;
use stdClass;
use ValueError;

/**
 * Base class for API version 1.
 *
 * This class provides common functionality for API endpoints in version 1 of the Icinga Notifications API.
 * It includes methods for handling responses, validating identifiers, and creating filters from query strings.
 *
 * @package Icinga\Module\Notifications\Api\V1
 */
#[OA\OpenApi(
    info: new OA\Info(
        version: '1.0.0',
        description: 'API for managing notification channels',
        title: 'Icinga Notifications API',
    ),
    servers: [
        new OA\Server(
            url: 'http://localhost/icingaweb2/notifications/api/v1',
            description: 'Local server',
        )
    ],
    security: [
        ['BasicAuth' => []],
    ],
)]
#[OA\Tag(
    name: 'Contacts',
    description: 'Operations related to notification Contacts'
)]
#[OA\Tag(
    name: 'Contactgroups',
    description: 'Operations related to notification contactgroups'
)]
#[OA\Tag(
    name: 'Channels',
    description: 'Operations related to notification channels'
)]
#[OA\SecurityScheme(
    securityScheme: 'BasicAuth',
    type: 'http',
    description: 'Basic authentication for API access',
    scheme: 'basic',
)]
abstract class ApiV1 extends ApiCore
{
    /**
     * API version.
     *
     * This constant defines the version of the API.
     *
     * @var string
     */
    public const VERSION = 'v1';

    /**
     * Handle the incoming server request and return a response.
     *
     * This method processes the incoming request, determines the appropriate method to call
     * based on the HTTP method and presence of an identifier, and invokes that method.
     * It also handles validation of the identifier and request body for POST and PUT requests.
     *
     * @param ServerRequestInterface $request The incoming server request.
     * @return ResponseInterface The response generated by the invoked method.
     * @throws HttpBadRequestException If the request is not valid.
     * @throws HttpException If the requested method does not exist.
     */
    public function handleRequest(ServerRequestInterface $request): ResponseInterface
    {
        $identifier = $request->getAttribute('identifier');
        $filterStr = $request->getUri()->getQuery();

        $responseData = match ($request->getAttribute('httpMethod')) {
            HttpMethod::PUT => $this->put($identifier, $this->getValidRequestBody($request)),
            HttpMethod::POST => $this->post($identifier, $this->getValidRequestBody($request)),
            HttpMethod::GET => $this->get($identifier, $filterStr),
            HttpMethod::DELETE => $this->delete($identifier),
            default => throw new HttpBadRequestException("Invalid request: This case shouldn't be reachable."),
        };

        return $this->createResponse(...$responseData);
    }

    protected function assertValidRequest(ServerRequestInterface $request): void
    {
        parent::assertValidRequest($request); // TODO: Change the autogenerated stub
    }


    //TODO: decide if these following functions should be versioned or moved to ApiCore

    /**
     * Create a filter from the filter string.
     *
     * This method parses the filter string and returns an array of filter rules.
     * If the filter string is empty, it returns false.
     *
     * @param callable $listener A listener function to handle conditions in the query string.
     * @return array|bool Returns an array of filter rules or false if no filter string is provided.
     * @throws HttpBadRequestException If the filter string cannot be parsed.
     */
    protected function createFilterFromFilterStr(string $filterStr, callable $listener): array|bool
    {
        if (! empty($filterStr)) {
            try {
                $filterRule = QueryString::fromString($filterStr)
                    ->on(
                        QueryString::ON_CONDITION,
                        $listener
                    )->parse();

                return FilterProcessor::assembleFilter($filterRule);
            } catch (Exception $e) {
                throw new HttpBadRequestException($e->getMessage());
            }
        }
        return false;
    }

    /**
     * Create a filter rule listener for validating allowed columns.
     *
     * This method returns a callable that can be used as a listener for filter conditions.
     * The listener checks if the column in the condition is among the allowed columns.
     * If the column is 'id', it also validates that the value is a valid UUID and
     * changes the column to 'external_uuid'.
     *
     * @param array $allowedColumns An array of allowed column names.
     * @return callable A listener function for filter conditions.
     */
    protected function createFilterRuleListener(array $allowedColumns, string $idColumnName): callable
    {
        return function (Condition $condition) use ($allowedColumns, $idColumnName) {
            $column = $condition->getColumn();
            if (! in_array($column, $allowedColumns)) {
                throw new HttpBadRequestException(
                    sprintf(
                        'Invalid request parameter: Filter column %s given, only %s are allowed',
                        $column,
                        preg_replace('/,([^,]*)$/', ' and$1', implode(', ', $allowedColumns))
                    )
                );
            }

            if ($column === 'id') {
                if (! Uuid::isValid($condition->getValue())) {
                    throw new HttpBadRequestException('The given filter id is not a valid UUID');
                }

                $condition->setColumn($idColumnName);
            }
        };
    }

    /**
     * Validate that the request has a JSON content type and return the parsed JSON content.
     *
     * @param ServerRequestInterface $request The request object to validate.
     * @return array The validated JSON content as an associative array.
     * @throws HttpBadRequestException If the content type is not application/json.
     */
    private function getValidRequestBody(ServerRequestInterface $request): array
    {
        if (! empty($parsedBody = $request->getParsedBody()) && is_array($parsedBody)) {
            return $parsedBody;
        }

        $msgPrefix = 'Invalid request body: ';
        $body = $request->getBody()->getContents();
        if (empty($body)) {
            throw new HttpBadRequestException($msgPrefix . 'given content is empty');
        }

        try {
            $validBody = Json::decode($body, true);
        } catch (JsonDecodeException $e) {
            throw new HttpBadRequestException($msgPrefix . 'given content is not a valid JSON');
        }

        return $validBody;
    }

    /**
     * Create a content generator for streaming JSON responses.
     *
     * This method creates a generator that yields JSON-encoded content
     * in batches, allowing for efficient streaming of large datasets.
     *
     * @param Connection $db The database connection to use for querying.
     * @param Select $stmt The SQL select statement to execute.
     * @param callable $enricher A function to enrich each row of data.
     * @param int $batchSize The number of rows to fetch in each batch (default is 500).
     *
     * @return Generator Yields JSON-encoded strings representing the content.
     * @throws JsonEncodeException
     */
    protected function createContentGenerator(
        Connection $db,
        Select $stmt,
        callable $enricher,
        int $batchSize = 500
    ): Generator {
        $stmt->limit($batchSize);
        $offset = 0;

        yield '{"data":[';
        $res = $db->select($stmt->offset($offset));
        do {
            /** @var stdClass $row */
            foreach ($res as $i => $row) {
                $enricher($row);

                if ($i > 0 || $offset !== 0) {
                    yield ",";
                }

                yield Json::sanitize($row);
            }

            $offset += $batchSize;
            $res = $db->select($stmt->offset($offset));
        } while ($res->rowCount());
        yield ']}';
    }
}
