<?php

namespace Icinga\Module\Notifications\Api;

use GuzzleHttp\Psr7\Response;
use Icinga\Exception\Http\HttpException;
use Icinga\Module\Notifications\Api\Elements\HttpMethod;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\StreamInterface;
use Psr\Http\Server\RequestHandlerInterface;
use ValueError;

/**
 * Abstract base class for API endpoints.
 *
 * This class provides the base functionality for handling API requests,
 */
abstract class ApiCore
{
    /**
     * Endpoint based request handling.
     *
     * @param ServerRequestInterface $request
     *
     * @return ResponseInterface
     */
    abstract protected function handleRequest(ServerRequestInterface $request): ResponseInterface;

    /**
     * Get the name of the API endpoint.
     *
     * @return string
     */
    abstract public function getEndpoint(): string;

    /**
     * The main entry point for processing API requests.
     *
     * @param ServerRequestInterface $request The incoming server request.
     *
     * @return ResponseInterface The response generated by the invoked method.
     *
     * @throws HttpException If the requested method does not exist.
     */
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        try {
            $httpMethod = HttpMethod::from(strtolower($request->getMethod()));
        } catch (ValueError) {
            throw (new HttpException(405, sprintf('HTTP method %s is not supported', $request->getMethod())))
                ->setHeader('Allow', $this->getAllowedMethods());
        }

        $request = $request->withAttribute('httpMethod', $httpMethod);

        if (! method_exists($this, $httpMethod->lowercase())) {
            throw (new HttpException(
                405,
                sprintf('Method %s is not supported for endpoint %s', $httpMethod->uppercase(), $this->getEndpoint())
            ))
                ->setHeader('Allow', $this->getAllowedMethods());
        }

        $this->assertValidRequest($request);

        return $this->handleRequest($request);
    }

    /**
     * Validate the incoming request.
     *
     * Override to implement specific request validation logic.
     *
     * @param ServerRequestInterface $request The incoming server request to validate.
     *
     * @return void
     */
    protected function assertValidRequest(ServerRequestInterface $request): void
    {
    }

    /**
     * Get allowed HTTP methods for the API.
     *
     * @return string
     */
    protected function getAllowedMethods(): string
    {
        $methods = [];

        foreach (HttpMethod::cases() as $method) {
            if (method_exists($this, $method->lowercase())) {
                $methods[] = $method->uppercase();
            }
        }

        return implode(', ', $methods);
    }

    /**
     * Create a Response object.
     *
     * @param int $status The HTTP status code.
     * @param array $headers An associative array of HTTP headers.
     * @param ?(StreamInterface|resource|string) $body The response body.
     * @param string $version The HTTP version.
     * @param ?string $reason The reason phrase (optional).
     *
     * @return ResponseInterface
     */
    protected function createResponse(
        int $status = 200,
        array $headers = [],
        $body = null,
        string $version = '1.1',
        ?string $reason = null
    ): ResponseInterface {
        $headers['Content-Type'] = 'application/json';

        return new Response($status, $headers, $body, $version, $reason);
    }
}
